/*
 * Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package org.opensolaris.os.dtrace;

import java.io.*;
import java.beans.*;

/**
 * A single key-value pair in a DTrace aggregation.
 * <p>
 * Immutable.  Supports persistence using {@link java.beans.XMLEncoder}.
 *
 * @see Aggregation
 * @author Tom Erickson
 */
public final class AggregationRecord implements Record, Serializable {
    static final long serialVersionUID = -4367614268579702616L;

    /**
     * Creates an aggregation record with the given key and value.
     * Supports XML persistence.
     *
     * @see #AggregationRecord(Tuple tupleKey, AggregationValue
     * recordValue, int n)
     */
    public
    AggregationRecord(Tuple tupleKey, AggregationValue recordValue)
    {
    }

    /**
     * Creates an aggregation record with the given key, value, and
     * ordinal. Supports XML persistence.
     *
     * @param tupleKey aggregation tuple, may be empty (see {@link
     * Tuple#EMPTY}) to indicate that this record's value belongs to an
     * unkeyed aggregation declared without square brackets, for
     * example: <pre>		{@code @a = count();}</pre>
     * @param recordValue aggregated value associated with the given
     * tuple
     * @param n ordinal from zero (first) to n-1 (last) within the
     * {@link Aggregate} containing this record
     * @throws NullPointerException if the given key or value is
     * {@code null}
     * @throws IllegalArgumentException if the given ordinal is negative
     */
    public
    AggregationRecord(Tuple tupleKey, AggregationValue recordValue, int n)
    {
    }

    /**
     * Gets the multi-element key associated with {@link
     * #getValue()}.
     *
     * @return non-null, possibly empty tuple
     * @see Aggregation#getRecord(Tuple key)
     */
    public Tuple
    getTuple()
    {
	return null;
    }

    /**
     * Gets the value associated with {@link #getTuple()}.  Values
     * generated by the DTrace actions {@code count()}, {@code sum()},
     * {@code avg()}, {@code min()}, and {@code max()} are of type
     * {@link Long}.  Values generated by the DTrace actions {@code
     * quantize(}) and {@code lquantize()} are of type {@link
     * Distribution}.
     *
     * @return non-null value keyed to {@link #getTuple()}
     */
    public AggregationValue
    getValue()
    {
	return null;
    }

    /**
     * Gets the ordinal generated when this AggregationRecord was added
     * to its containing {@link Aggregate} by the native DTrace library,
     * from zero (first) to n-1 (last). The sequence described by an
     * aggregate's record ordinals reflects the setting of the {@link
     * Option#aggsortkey aggsortkey}, {@link Option#aggsortkeypos
     * aggsortkeypos}, {@link Option#aggsortpos aggsortpos}, and {@link
     * Option#aggsortrev aggsortrev} DTrace options and matches the way
     * that the records would be ordered by {@code dtrace(1M)}.
     *
     * @return non-negative ordinal from zero (first) to n-1 (last)
     * within the {@code Aggregate} containing this record
     * @see Aggregate#getOrderedRecords()
     */
    public int
    getOrdinal()
    {
	return -1;
    }
}